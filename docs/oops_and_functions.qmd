---
title: "oops_and_functions"
format: html
---

# Day 4: Task & Activities

## For loops

#### Task 1

```{r}
# Create two sequences, one called weekdays that contains days of the week (“Monday”, “Tuesday”, “Wednesday”, etc.) and one called transects that contains the series of transect names “Transect A”, “Transect B,”Transect C”. Write a nested for loop that creates a matrix containing the following:
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
transect_1 <- c("Transect A", "Transect B", "Transect C") 

weekday_transects <- matrix(nrow = length(weekdays), ncol = length(transect_1))
library(stringr)

for(m in seq_along(weekdays)) {
  for(n in seq_along(transect_1)) {
       weekday_transects[m, n] <- paste(weekdays[m], "-", transects[n])

  #   if(stringr::str_detect(i, "A")){
  #       weekday_transects <- paste(weekdays[i], "-", transect_1[i])
  #   } else if (stringr::str_detect(i, "B")){
  #       weekday_transects <- paste(weekdays[i], "-", transect_1[i])
  # }
  # weekday_transects <- as.matrix(weekday_transects)
}}
weekday_transects


```

# Introducing Functions
```{r}
# Write a function called force that calculates a force (in Newtons), given inputs of mass (in kg) and acceleration (in m/s^2)
#  
#  (recall: F = ma
# ), and returns a statement “The resulting force is ___ Newtons.”
force <- function(mass, acceleration) {
  print(paste("The result force is" , mass*acceleration, "Newtons."))
}

force(10,20)

```
#### Task 3
```{r}
# The length:weight relationship for fish is: 
# , where where L is total fish length (centimeters), W is the expected fish weight (grams), and a and b are species-dependent parameter values (shown below for several fish from Peyton et al. 2016).

fish_parms <- data.frame(sci_name = c("Chanos chanos", "Sphyraena barracuda", "Caranx ignobilis"), common_name = c("Milkfish", "Great barracuda", "Giant trevally"), a_est = c(0.095,0.0181, 0.0353), b_est = c(2.52, 3.27,3.05))

head(fish_parms)

fish_weight <- function(fish_name, tot_length){
#subset to only keep rows where column_name matches fish_name, otherwise considers milkfish for all three (returns three calculations for other species)!
  parameters <- fish_parms[fish_parms$common_name == fish_name, ] # keep columns, but subset for rows that match argument
    # W = fish_parms$a_est*(tot_length^fish_parms$b_est)
 W = parameters$a_est*(tot_length^parameters$b_est)
  print(W)  
}
fish_weight("Milkfish", 10)


# Now, try creating a vector of lengths (e.g. 0 to 100, by increments of 1) and ensuring that your function will calculate the fish weight over a range of lengths for the given species (try this for milkfish, storing the output weights as milkfish_weights.

fish_lengths <- seq(from = 0, to = 100, by =1 )
fish_weights_store <- vector(mode = "numeric", length = length(fish_lengths))
fish_weight_2 <- function(fish_name, fish_lengths){
#subset to only keep rows where column_name matches fish_name, otherwise considers milkfish for all three (returns three calculations for other species)!
  parameters <- fish_parms[fish_parms$common_name == fish_name, ] # keep columns, but subset for rows that match argument
  for(i in seq_along(fish_lengths)) {
  tot_length = fish_lengths[i]
 # W = parameters$a_est*(tot_length^parameters$b_est)
  fish_weights_store[i] <- parameters$a_est*(tot_length^parameters$b_est)
  print(fish_weights_store)  
  break
}
}

fish_weight_2("Milkfish", fish_lengths)





```

#### Task 4
```{r}
# Write a function called wave_power that calculates potential ocean wave power given inputs of wave height and period.
# 

wave_heights <- seq(from = 0, to = 3, by = .2)
# wave_range <- max(h) - min(h)
wave_powers <- vector(mode = "numeric", length = length(wave_heights))
wave_power <- function(h,t){
  for(i in seq_along(h)){
   wave_heights[i] <- 0.5*(h)^2*(t)
     wave_powers[i] <- wave_heights[i] 
  }
   print(wave_powers)
}

wave_power(wave_heights, 8)
# Use your wave_power function to approximate wave power for a period of 8 seconds, over a range of wave heights from 0 to 3 meters by increments of 0.2 meters.




```


# Additional practice and notes


```{r}

```

